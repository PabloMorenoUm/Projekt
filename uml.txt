@startuml

class WindowSize {
-x: float
-y: float
+WindowSize()
+getX() const: const float&
+getY() const: const float&
}

enum Games {
PONG
REACTION
GAME3
GAME4
}

class Basic {
#m_Sprite: sf::Sprite
#m_Texture: sf::Texture
#m_WindowSize: WindowSize
+setSprite(const std::string& filename): void
}

WindowSize *-- Basic

class Thing {
#m_Position: sf::Vector2f
#setPosition(const float& posX, const float& posY): void
+Thing()
+Thing(const float& posX, const float& posY, const std::string& filename)
+getSprite() const: const sf::Sprite&
+getBounds() const: sf::FloatRect
}

Basic <|-- Thing

class BasicPage {
#m_MissionsCompleted: std::map<Games, bool>
#m_Window: sf::RenderWindow
#m_Buffer: sf::SoundBuffer
#m_Song: sf::Sound
#m_Clock: sf::Clock
#m_NotesMusic: Words
#goToMainMenu(): void
#goToBob(): void
#modifySong(): void
#loadSong(const std::string& song): void
#createWindow(const std::string& title): void
#input() = 0: virtual void
#update(const float &dtAsSeconds) = 0: virtual void
#draw() = 0: virtual void
+start(): void
}

Basic <|-- BasicPage
Games *-- BasicPage
Words *-- BasicPage

class Direction {
-pressed: bool
-move(): void
-stop(): void
+handleMoving(const bool& button): void
+isPressed() const: bool
}

class Bob {
-m_RightPressed: Direction
-m_LeftPressed: Direction
-m_UpPressed: Direction
-m_DownPressed: Direction
-m_Speed: float
+Bob()
+input(): void
+update(const float &elapsedTime): void
}

Thing <|--Bob
Direction *-- Bob

class Engine {
-m_Succeed: Words
-m_Bob: Bob
-m_ThingRight: Thing
-m_ThingLeft: Thing
-m_ThingUp: Thing
-m_ThingDown: Thing
-input() override: void
-update(const float &dtAsSeconds) override: void
-draw() override: void
+Engine()
+Engine(std::map<Games, bool> &missionsCompleted)
}

BasicPage <|-- Engine
Bob *-- Engine

class MainMenu{
-titleSize: unsigned
-itemSize: unsigned
-title: Words
-play: Words
-info: Words
-quit: Words
-markItem(Words& toBeMarked, Words& toBeUnmarked1, Words& toBeUnmarked2): static void
-input() override: void
-update(const float &dtAsSeconds) override: void
-draw() override: void
+MainMenu()
}

BasicPage <|-- MainMenu
Engine o-o MainMenu

class Info {
-itemSize: unsigned
-title: Words
-eike: Words
-moritz: Words
-pablo: Words
-input() override: void
-update(const float &dtAsSeconds) override: void
-draw() override: void
+Info()
}

BasicPage <|-- Info
MainMenu o-o Info

class Words {
-m_Text: sf::Text
-m_Font: sf::Font
+Words(const std::string& text, const unsigned &size)
+Words(const std::string& text, const unsigned &size, const float &posX, const float &posY)
+getText() const: const sf::Text&
+setString(const std::string& name): void
+changeColor(const sf::Color& color): void
}

class BallBat {
#position: sf::Vector2f
#shape: sf::RectangleShape
#speed: float
+getPosition(): sf::FloatRect
+getShape() const: const sf::RectangleShape&
+update(const float &elapsedTime) = 0: virtual void
}

class Ball {
-signX: bool
-signY: bool
-speedConst: const float
+Ball(const float &startX, const float &startY)
+reboundSides(): void
+reboundBatOrTop(): void
+hitBottom(): void
+update(const float &elapsedTime): void
}

BallBat <|-- Ball

class Bat {
-m_RightPressed: Direction
-m_LeftPressed: Direction
-m_WindowSize: WindowSize
-moveLeft(const float &elapsedTime): void
-moveRight(const float &elapsedTime): void
+Bat(const float &startX, const float &startY)
+input(): void
+update(const float &elapsedTime): void
}

BallBat <|-- Bat
Direction *-- Bat
WindowSize *-- Bat

class GamePage {
#scoreLimit: const unsigned
#score: unsigned
#hud: Words
#hintEngine: Words
#writeScore() const: virtual std::string
}

BasicPage <|-- GamePage

class Pong {
-lives: int
-bat: Bat
-ball: Ball
-writeScore() const: std::string
-input() override: void
-update(const float &dtAsSeconds) override: void
-draw() override: void
+Pong(std::map<Games, bool> &missionsCompleted)
}

Bat *-- Pong
Ball *-- Pong
GamePage <|--Pong
Engine o-o Pong

class Reaction {
-m_Q: Words
-m_W: Words
-m_E: Words
-m_A: Words
-m_S: Words
-m_D: Words
-m_Y: Words
-m_X: Words
-m_C: Words
-input() override: void
-update(const float &dtAsSeconds) override: void
-draw() override: void
+Reaction(std::map<Games, bool> &missionsCompleted)
}

GamePage <|-- Reaction
Engine o-o Reaction

@enduml